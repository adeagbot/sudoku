S- Sorted Key
What is it ?
Amazon Redshift stores your data on disk in sorted order according to the sort key. 
The Amazon Redshift query optimizer uses sort order when it determines optimal query plans.

Use cases : Filter
 
Benefits 
1. Used by query optimizer to produce optimal query plans.
2. Improves performance by avoiding  scanning the entire records
3. Helps in choosing an efficient join stragegy during query plans - Sort merge over hash join 
Characteristics of sorted key 
1. Query by timestamp or date 
2. Query by range filtering or equality (Min and Max column values stored on each block)
3. if you frequently join a table, specify the join column as both the sort key and distribution key 
 
 
Distribution key  

What is it ?

When you execute a query, the query optimizer redistributes the rows to the compute nodes as needed to perform any joins and aggregations.
The goal in selecting a table distribution style is to minimize the impact of the redistribution step by locating the data where it needs to be before the query is executed.

Use cases - Aggregation and Joins 

Benefits
1. data locality to avoid overhead due to shuffling 

Characteristics
1. Distribute fact and dimension table on their common columns
Designate both the dimension table's primary key and the fact table's corresponding foreign key as the DISTKEY.

2. Choose the largest dimension based on the size of the filtered dataset.
Only the rows that are used in the join need to be distributed, so consider the size of the dataset after filtering, not the size of the table.

3. Choose a column with high cardinality in the filtered result set.
If you distribute a sales table on a date column, for example, you should probably get fairly even data distribution, unless most of your sales are seasonal.
 However, if you commonly use a range-restricted predicate to filter for a narrow date period, most of the filtered rows occur on a limited set of slices and the query workload is skewed.
 
4. Change some dimension tables to use ALL distribution.
If a dimension table cannot be collocated with the fact table or other important joining tables, 
you can improve query performance significantly by distributing the entire table to all of the nodes.
 Using ALL distribution multiplies storage space requirements and increases load times and maintenance operations,
 so you should weigh all factors before choosing ALL distribution.
 
 1. Best Practises for designing tables
 https://docs.aws.amazon.com/redshift/latest/dg/c_designing-tables-best-practices.html
 2. Best Practices for Loading Data
 https://docs.aws.amazon.com/redshift/latest/dg/c_loading-data-best-practices.html
 3.